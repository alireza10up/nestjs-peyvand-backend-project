# Generic Deployment Template
# Replace the following variables with your project-specific values:
# - PROJECT_NAME: Name of your project (e.g., peyvand, fincho)
# - BRANCH_NAME: Target branch (e.g., develop, main)
# - SERVER_IP: Server IP address
# - SERVER_PORT: SSH port
# - SERVER_USER: SSH username
# - PROJECT_DIR: Directory name on server
# - PM2_PROCESS_NAME: PM2 process name
# - REPO_URL: GitHub repository URL

name: Deploy to Server - Environment Development
on:
  push:
    branches:
      - develop # Change this to your target branch
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        
      - name: Show Deployment Config
        run: |
          echo "üöÄ Deployment Configurations:"
          echo "  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}"
          echo "  BRANCH_NAME: ${{ secrets.BRANCH_NAME }}"
          echo "  SERVER_IP: ${{ secrets.SERVER_IP }}"
          echo "  SERVER_PORT: ${{ secrets.SERVER_PORT }}"
          echo "  SERVER_USER: ${{ secrets.SERVER_USER }}"
          echo "  PROJECT_DIR: ${{ secrets.PROJECT_DIR }}"
          echo "  PM2_PROCESS_NAME: ${{ secrets.PM2_PROCESS_NAME }}"
          echo "  REPO_URL: ${{ secrets.REPO_URL }}"

      - name: Setup SSH
        run: |
          echo "üîê Setting up SSH key..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          echo "‚úÖ SSH setup completed."

      - name: Test SSH Connection
        run: |
          echo "üîå Testing SSH connection to ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:$(( ${{ secrets.SERVER_PORT }} )) ..."
          ssh -vvv -i ~/.ssh/id_rsa -p ${{ secrets.SERVER_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo '‚úÖ SSH Connection Successful'"
          
      - name: Deploy to Server
        run: |
          echo "üöÄ Starting deployment on server..."
          ssh -i ~/.ssh/id_rsa -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} bash -s << 'EOF'
            echo "üìÇ Navigating to home directory..."
            cd /home/${{ secrets.SERVER_USER }}

            echo "üîç Checking if project directory exists and is a git repo..."
            if [ ! -d "${{ secrets.PROJECT_DIR }}/.git" ]; then
              echo "‚ö†Ô∏è Repository not found, cloning repository..."
              git clone ${{ secrets.REPO_URL }} ${{ secrets.PROJECT_DIR }}
            else
              echo "‚úÖ Repository found."
            fi

            cd ${{ secrets.PROJECT_DIR }}

            echo "üîÑ Resetting local changes and pulling latest code from branch '${{ secrets.BRANCH_NAME }}'..."
            git reset --hard
            git pull origin ${{ secrets.BRANCH_NAME }}

            echo "üì¶ Installing dependencies..."
            npm install --legacy-peer-deps

            echo "üìù Writing environment variables to .env file..."
            echo "${{ secrets.ENV_VARS }}" > .env

            echo "üèóÔ∏è Building project..."
            npm run build

            echo "üîÑ Managing PM2 process '${{ secrets.PM2_PROCESS_NAME }}'..."
            pm2 describe ${{ secrets.PM2_PROCESS_NAME }} > /dev/null
            if [ $? -eq 0 ]; then
              echo "‚úÖ Restarting existing PM2 process..."
              pm2 restart ${{ secrets.PM2_PROCESS_NAME }}
            else
              echo "‚ö†Ô∏è PM2 process not found, starting a new one..."
              pm2 start npm --name "${{ secrets.PM2_PROCESS_NAME }}" -- run start
            fi

            echo "‚úÖ Deployment Finished!"
          EOF